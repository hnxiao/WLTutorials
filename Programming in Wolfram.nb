(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[      5951,        206]
NotebookOptionsPosition[      4724,        158]
NotebookOutlinePosition[      5077,        174]
CellTagsIndexPosition[      5034,        171]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Programming in Wolfram", "Title",
 CellChangeTimes->{{3.619930128369492*^9, 3.619930134272273*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.619930303314942*^9, 3.619930307427252*^9}}],

Cell["\<\
Wolfram language is a symbolic, functional, and rule-based multi-paradigm \
programming language. wiki
So key notions in Wolfram language are all listed above.\
\>", "Text",
 CellChangeTimes->{{3.619930310006435*^9, 3.619930354813292*^9}, {
  3.619931073378807*^9, 3.619931108347324*^9}}],

Cell[CellGroupData[{

Cell["Some demos for Wolfram language", "Subsection",
 CellChangeTimes->{{3.619930464217808*^9, 3.619930475026333*^9}}],

Cell["It supports conventional procedural programming:", "Text",
 CellChangeTimes->{{3.619930478651349*^9, 3.61993048677907*^9}, {
  3.619930562801125*^9, 3.619930565016211*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "<", "4"}], ",", 
   RowBox[{"i", "++"}], ",", 
   RowBox[{"Print", "[", "i", "]"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.619930490191524*^9, 3.619930500974977*^9}}],

Cell[CellGroupData[{

Cell[BoxData["0"], "Print",
 CellChangeTimes->{{3.6199305059175863`*^9, 3.6199305061539583`*^9}}],

Cell[BoxData["1"], "Print",
 CellChangeTimes->{{3.6199305059175863`*^9, 3.619930506157216*^9}}],

Cell[BoxData["2"], "Print",
 CellChangeTimes->{{3.6199305059175863`*^9, 3.6199305061601477`*^9}}],

Cell[BoxData["3"], "Print",
 CellChangeTimes->{{3.6199305059175863`*^9, 3.619930506163035*^9}}]
}, Open  ]]
}, Open  ]],

Cell["and, rule and pattern- based programming:", "Text",
 CellChangeTimes->{{3.6199305805296392`*^9, 3.61993058309195*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rule", " ", "=", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", " ", "b_"}], "}"}], " ", ":>", " ", 
    RowBox[{"{", 
     RowBox[{"b", ",", " ", "a"}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", " ", "3"}], "}"}], " ", "/.", " ", "rule"}]}], "Code",
 CellChangeTimes->{{3.619930599306178*^9, 3.619930625795279*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.619930600685664*^9, 3.619930627828548*^9}}]
}, Open  ]],

Cell["\<\
and purely functional programming like this classic fibbonaci example:\
\>", "Text",
 CellChangeTimes->{3.619930639357544*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], "=", "1"}], ";", "  ", 
  RowBox[{
   RowBox[{"f", "[", "2", "]"}], "=", "1"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"n", "-", "1"}], "]"}], "+", 
    RowBox[{"f", "[", 
     RowBox[{"n", "-", "2"}], "]"}]}]}], " ", 
  RowBox[{"(*", 
   RowBox[{"Define", " ", "Fibbonaci", " ", "Function"}], "*)"}]}], "\n", 
 RowBox[{"f", " ", "/@", " ", 
  RowBox[{"Range", "[", "10", "]"}], "       ", 
  RowBox[{"(*", 
   RowBox[{"Now", " ", "get", " ", "the", " ", "first", " ", "10"}], 
   "*)"}]}]}], "Code",
 CellChangeTimes->{{3.619930650793082*^9, 3.619930679638309*^9}, {
  3.619930781851378*^9, 3.6199307968152437`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21",
    ",", "34", ",", "55"}], "}"}]], "Output",
 CellChangeTimes->{3.619930653664987*^9, 3.619930798053524*^9}]
}, Open  ]],

Cell["\<\
In the following, we will explain this definitions one by one.\
\>", "Text",
 CellChangeTimes->{{3.619931202129994*^9, 3.619931222144558*^9}}]
}, Open  ]]
}, Open  ]],

Cell["What is symbolic programming?", "Section",
 CellChangeTimes->{{3.6199311198196173`*^9, 3.619931126940383*^9}}],

Cell["What is functional programming?", "Section",
 CellChangeTimes->{{3.61993113420418*^9, 3.6199311413647327`*^9}}],

Cell["Rules and patterns in Wolfram", "Section",
 CellChangeTimes->{{3.619931154221163*^9, 3.6199311556372757`*^9}, {
  3.6199311856884747`*^9, 3.6199311952712507`*^9}}]
}, Open  ]],

Cell["", "Title",
 CellChangeTimes->{3.6199302889231586`*^9}]
},
WindowSize->{808, 583},
WindowMargins->{{52, Automatic}, {Automatic, 4}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (June 27, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 105, 1, 92, "Title"],
Cell[CellGroupData[{
Cell[710, 27, 97, 1, 64, "Section"],
Cell[810, 30, 298, 6, 49, "Text"],
Cell[CellGroupData[{
Cell[1133, 40, 119, 1, 44, "Subsection"],
Cell[1255, 43, 178, 2, 30, "Text"],
Cell[CellGroupData[{
Cell[1458, 49, 265, 7, 49, "Code"],
Cell[CellGroupData[{
Cell[1748, 60, 97, 1, 21, "Print"],
Cell[1848, 63, 95, 1, 21, "Print"],
Cell[1946, 66, 97, 1, 21, "Print"],
Cell[2046, 69, 95, 1, 21, "Print"]
}, Open  ]]
}, Open  ]],
Cell[2168, 74, 124, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[2317, 79, 395, 11, 66, "Code"],
Cell[2715, 92, 139, 3, 28, "Output"]
}, Open  ]],
Cell[2869, 98, 136, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[3030, 105, 781, 22, 82, "Code"],
Cell[3814, 129, 228, 5, 28, "Output"]
}, Open  ]],
Cell[4057, 137, 152, 3, 30, "Text"]
}, Open  ]]
}, Open  ]],
Cell[4236, 144, 116, 1, 64, "Section"],
Cell[4355, 147, 117, 1, 50, "Section"],
Cell[4475, 150, 169, 2, 50, "Section"]
}, Open  ]],
Cell[4659, 155, 61, 1, 92, "Title"]
}
]
*)

(* End of internal cache information *)
